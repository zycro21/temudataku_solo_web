generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Booking {
  id                  String              @id @default(cuid())
  menteeId            String
  mentoringServiceId  String              @map("mentoring_service_id")
  referralUsageId     String?             @unique
  bookingDate         DateTime?           @default(now())
  status              String?             @db.VarChar
  specialRequests     String?
  createdAt           DateTime?           @default(now())
  updatedAt           DateTime?

  // Relations
  mentee              User                @relation(fields: [menteeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mentoringService    MentoringService    @relation(fields: [mentoringServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referralUsage       ReferralUsage?      @relation("ReferralUsageBooking", fields: [referralUsageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  payment             Payment?            @relation("BookingPayment") // satu payment untuk booking
  participants        BookingParticipant[]

  @@map("bookings")
}

model BookingParticipant {
  id             String   @id @default(cuid())
  bookingId      String
  userId         String
  paymentStatus  String   // 'pending', 'confirmed', etc.
  paymentId      String?  @map("payment_id")
  isLeader       Boolean  @default(false)

  booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment        Payment? @relation("ParticipantPayment", fields: [paymentId], references: [id])

  @@map("booking_participants")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Certificate {
  id                String            @id @default(cuid())
  menteeId          String            @map("mentee_id")
  serviceId         String            @map("service_id")
  certificateNumber String            @unique @db.VarChar @map("certificate_number")
  issueDate         DateTime?         @default(now()) @db.Timestamp(6) @map("issue_date")
  certificatePath   String?           @db.VarChar @map("certificate_path")
  googleDriveUrl    String?           @db.VarChar @map("google_drive_url") //
  projectCertificatePath String?      @db.VarChar @map("project_certificate_path")
  status            String?           @db.VarChar @map("status") // generated, sent, viewed
  verifiedBy        String?           @db.VarChar @map("verified_by") // ID dari admin/mentor yang verifikasi (optional)
  note              String?           @db.VarChar @map("note") // Catatan internal admin (optional)
  createdAt         DateTime?         @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt         DateTime?         @db.Timestamp(6) @map("updated_at")

  user              User              @relation(fields: [menteeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mentoringService  MentoringService  @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([menteeId, serviceId])
  @@map("certificates")
}

model CommissionPayments {
  id                String       @id @default(cuid())
  referralCodeId    String       @map("referral_code_id")
  ownerId           String       @map("owner_id")
  amount            Decimal
  transactionId     String?      @map("transaction_id") // Bisa ID dari sistem payment gateway, jika ada
  status            String?      // pending, paid, failed
  paid_at           DateTime?
  created_at        DateTime     @default(now())

  referralCode      ReferralCode @relation(fields: [referralCodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner             User         @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@map("commission_payments")
}

model ExportLog {
  id         String    @id @default(cuid())
  entity     String    @db.VarChar     // contoh: "users", "projects", "certificates"
  type       String    @db.VarChar     // "all" atau "filter"
  createdAt  DateTime  @default(now()) @map("created_at")

  @@map("export_logs")
}

model Feedback {
  id               String            @id @default(cuid())
  sessionId        String            @map("session_id")
  userId           String            @map("user_id")
  rating           Int
  comment          String?

  submittedDate    DateTime?         @default(now()) @db.Timestamp(6) @map("submitted_date")
  createdAt        DateTime?         @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt        DateTime?         @db.Timestamp(6) @map("updated_at")

  isAnonymous      Boolean           @default(false)  // Jika true, nama user tidak ditampilkan
  isVisible        Boolean           @default(true)   // Bisa di-hide admin dari publik

  session          MentoringSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([sessionId, userId]) // Satu user hanya bisa beri satu feedback untuk satu session
  @@map("feedback")
}

model MentorProfile {
  id                   String                  @id @default(cuid())
  userId               String                  @unique @map("user_id")
  expertise            String?
  bio                  String?
  experience           String?
  availabilitySchedule Json?                   @db.JsonB @map("availability_schedule")
  hourlyRate           Decimal?                @db.Decimal @map("hourly_rate")
  isVerified           Boolean?                @default(false) @map("is_verified")
  createdAt            DateTime?               @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt            DateTime?               @db.Timestamp(6) @map("updated_at")

  user                 User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mentoringServices    MentoringServiceMentor[]
  mentoringSessions    MentoringSessionMentor[]
  practices            Practice[]

  @@map("mentor_profiles")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MentoringService {
  id                 String              @id @default(cuid())
  serviceName        String              @db.VarChar @map("service_name")
  description        String?
  price              Decimal             @db.Decimal
  serviceType        String?             @db.VarChar @map("service_type")
  maxParticipants    Int?                @map("max_participants")
  durationDays       Int                 @map("duration_days")
  isActive           Boolean?            @default(true) @map("is_active")
  createdAt          DateTime?           @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt          DateTime?           @db.Timestamp(6) @map("updated_at")

  bookings           Booking[]
  certificates       Certificate[]
  mentors            MentoringServiceMentor[]
  mentoringSessions  MentoringSession[]
  projects           Project[]          

  @@map("mentoring_services")
}

model MentoringServiceMentor {
  id                 String         @id @default(cuid())
  mentoringServiceId String         @map("mentoring_service_id")
  mentorProfileId    String         @map("mentor_profile_id")

  mentoringService   MentoringService @relation(fields: [mentoringServiceId], references: [id], onDelete: Cascade)
  mentorProfile      MentorProfile    @relation(fields: [mentorProfileId], references: [id], onDelete: Cascade)

  @@unique([mentoringServiceId, mentorProfileId])
  @@map("mentoring_service_mentors")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MentoringSession {
  id                 String              @id @default(cuid())
  serviceId          String              @map("service_id")
  date               String              @map("date")
  startTime          String              @map("start_time")
  endTime            String              @map("end_time")
  durationMinutes    Int                 @map("duration_minutes")
  meetingLink        String?             @db.VarChar @map("meeting_link")
  status             String?             @db.VarChar
  notes              String?
  createdAt          DateTime?           @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt          DateTime?           @db.Timestamp(6) @map("updated_at")

  feedbacks          Feedback[]
  mentors            MentoringSessionMentor[]
  mentoringService   MentoringService    @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectSubmissions ProjectSubmission[] 

  @@map("mentoring_sessions")
}

model MentoringSessionMentor {
  id                  String            @id @default(cuid())
  mentoringSessionId  String            @map("mentoring_session_id")
  mentorProfileId     String            @map("mentor_profile_id")

  mentoringSession    MentoringSession  @relation(fields: [mentoringSessionId], references: [id], onDelete: Cascade)
  mentorProfile       MentorProfile     @relation(fields: [mentorProfileId], references: [id], onDelete: Cascade)

  @@unique([mentoringSessionId, mentorProfileId])
  @@map("mentoring_session_mentors")
}

model Notification {
  id             String   @id @default(cuid())
  type           String   @db.VarChar
  title          String   @db.VarChar
  message        String?
  deliveryMethod String?  @db.VarChar
  actionUrl      String?  @db.VarChar
  sentAt         DateTime? @db.Timestamp(6)
  meta           Json?    @db.JsonB
  targetRole     String[] @db.VarChar   // fix this line
  createdAt      DateTime? @default(now()) @db.Timestamp(6) @map("created_at")

  recipients     NotificationRecipient[]

  @@map("notifications")
}

model NotificationRecipient {
  id             String    @id @default(cuid())
  notificationId String    @map("notification_id")
  userId         String    @map("user_id")
  isRead         Boolean?  @default(false) @map("is_read")
  readAt         DateTime? @db.Timestamp(6)

  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@map("notification_recipients")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments

model Payment {
  id                    String              @id @default(cuid())
  bookingId             String?             @unique @map("booking_id")
  amount                Decimal             @db.Decimal
  paymentDate           DateTime?           @db.Timestamp(6) @map("payment_date")
  paymentMethod         String?             @db.VarChar @map("payment_method")
  transactionId         String?             @db.VarChar @map("transaction_id")
  status                String?             @db.VarChar
  createdAt             DateTime?           @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt             DateTime?           @db.Timestamp(6) @map("updated_at")

  booking               Booking?            @relation("BookingPayment", fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  practicePurchases     PracticePurchase[]
  bookingParticipants   BookingParticipant[] @relation("ParticipantPayment")

  @@map("payments")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PracticeFile {
  id              String             @id @default(cuid())
  materialId      String             @map("material_id")
  fileName        String             @db.VarChar @map("file_name")
  filePath        String             @db.VarChar @map("file_path")
  fileType        String             @db.VarChar @map("file_type")
  fileSize        Int?               @map("file_size")
  orderNumber     Int               @map("order_number")
  createdAt       DateTime?          @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt       DateTime?          @db.Timestamp(6) @map("updated_at")

  practiceMaterial PracticeMaterial  @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("practice_files")
}

model PracticeMaterial {
  id                String              @id @default(cuid())
  practiceId        String              @map("practice_id")
  title             String              @db.VarChar
  description       String?
  orderNumber       Int                 @map("order_number")
  createdAt         DateTime?           @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt         DateTime?           @db.Timestamp(6) @map("updated_at")

  practiceFiles     PracticeFile[]
  practice          Practice            @relation(fields: [practiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  practiceProgress  PracticeProgress[]

  @@map("practice_materials")
}

model PracticeProgress {
  id                String             @id @default(cuid())
  userId            String             @map("user_id")
  practiceId        String             @map("practice_id")
  materialId        String             @map("material_id")
  isCompleted       Boolean?           @default(false) @map("is_completed")
  lastAccessed      DateTime?          @db.Timestamp(6) @map("last_accessed")
  timeSpentSeconds  Int?               @default(0) @map("time_spent_seconds")
  createdAt         DateTime?          @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt         DateTime?          @db.Timestamp(6) @map("updated_at")

  practiceMaterial  PracticeMaterial   @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  practice          Practice           @relation(fields: [practiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("practice_progress")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PracticePurchase {
  id               String           @id @default(cuid())
  userId           String
  practiceId       String
  paymentId        String?
  referralUsageId  String?          @unique
  purchaseDate     DateTime?        @default(now())
  status           String?          @db.VarChar
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?

  user             User             @relation(fields: [userId], references: [id])
  practice         Practice         @relation(fields: [practiceId], references: [id])
  payment          Payment?         @relation(fields: [paymentId], references: [id])
  referralUsage    ReferralUsage?   @relation("ReferralUsagePracticePurchase", fields: [referralUsageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("practice_purchases")
}

model PracticeReview {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  practiceId      String    @map("practice_id")
  rating          Int
  comment         String?
  submittedDate   DateTime? @default(now()) @db.Timestamp(6) @map("submitted_date")
  createdAt       DateTime? @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt       DateTime? @db.Timestamp(6) @map("updated_at")

  practice        Practice  @relation(fields: [practiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("practice_reviews")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Practice {
  id                String              @id @default(cuid())
  mentorId          String              @map("mentor_id")
  title             String              @db.VarChar
  description       String?
  thumbnailImage    String?             @db.VarChar @map("thumbnail_image")
  price             Decimal             @db.Decimal
  practiceType      String?             @db.VarChar @map("practice_type")
  category          String?             @db.VarChar
  tags              Json?               @db.Json
  isActive          Boolean?            @default(true) @map("is_active")
  createdAt         DateTime?           @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt         DateTime?           @db.Timestamp(6) @map("updated_at")

  practiceMaterials PracticeMaterial[]
  practiceProgress  PracticeProgress[]
  practicePurchases PracticePurchase[]
  practiceReviews   PracticeReview[]
  mentorProfile     MentorProfile       @relation(fields: [mentorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("practices")
}

model Project {
  id               String             @id @default(cuid())
  serviceId        String             @map("service_id")
  title            String             @db.VarChar
  description      String?
  createdAt        DateTime?          @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt        DateTime?          @db.Timestamp(6) @map("updated_at")

  mentoringService MentoringService   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  submissions      ProjectSubmission[]

  @@map("projects")
}

model ProjectSubmission {
  id              String            @id @default(cuid())
  projectId       String            @map("project_id")
  menteeId        String            @map("mentee_id")
  sessionId       String?           @map("session_id") // optional
  filePaths       String[]          @map("file_paths")
  submissionDate  DateTime?         @default(now()) @db.Timestamp(6) @map("submission_date")
  plagiarismScore Decimal?          @db.Decimal @map("plagiarism_score")
  Score           Decimal?          @db.Decimal
  mentorFeedback  String?           @db.VarChar @map("mentor_feedback")
  isReviewed      Boolean?          @default(false) @map("is_reviewed")
  gradedBy        String?           @map("graded_by")
  createdAt       DateTime?         @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt       DateTime?         @db.Timestamp(6) @map("updated_at")

  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user            User              @relation("SubmissionByMentee", fields: [menteeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  session         MentoringSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gradedByUser    User?             @relation("SubmissionGradedByMentor", fields: [gradedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("project_submissions")
}

model ReferralCommisions {
  id                String       @id @default(cuid())
  referralCodeId    String       // Terhubung ke kode referral
  transactionId     String       @map("transaction_id")// Dari tabel payments
  amount            Decimal
  created_at        DateTime     @default(now())

  referral_code     ReferralCode @relation(fields: [referralCodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("referral_commisions")
}

model ReferralCode {
  id                    String           @id @default(cuid())
  ownerId               String
  code                  String           @unique
  discountPercentage    Decimal
  commissionPercentage  Decimal
  createdDate           DateTime?        @default(now())
  expiryDate            DateTime?
  isActive              Boolean?         @default(true)
  createdAt             DateTime?        @default(now())
  updatedAt             DateTime?

  owner                 User             @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usages                ReferralUsage[]
  referralCommisions    ReferralCommisions[]
  commissionPayments    CommissionPayments[]

  @@map("referral_codes")
}

model ReferralUsage {
  id               String             @id @default(cuid())
  userId           String
  referralCodeId   String
  usedAt           DateTime           @default(now())
  context          String             @db.VarChar
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referralCode     ReferralCode       @relation(fields: [referralCodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  booking          Booking[]          @relation("ReferralUsageBooking") // relasi balik booking
  practicePurchase PracticePurchase[] @relation("ReferralUsagePracticePurchase") // relasi balik practice purchase

  @@map("referral_usages")
}

model Role {
  id          String       @id @default(cuid())
  roleName    String       @unique @db.VarChar @map("role_name")
  description String?
  createdAt   DateTime?    @default(now()) @db.Timestamp(6) @map("created_at")

  userRoles   UserRole[]

  @@map("roles")
}


model UserBehavior {
  id          String     @id @default(cuid())
  userId      String?    @map("user_id")
  pageVisited String     @db.VarChar @map("page_visited")
  action      String?    @db.VarChar
  timestamp   DateTime?  @default(now()) @db.Timestamp(6)
  ipAddress   String?    @db.VarChar @map("ip_address")
  userAgent   String?    @db.VarChar @map("user_agent")
  createdAt   DateTime?  @default(now()) @db.Timestamp(6) @map("created_at")

  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_behavior")
}

model UserRole {
  id            String     @id @default(cuid())
  userId        String     @map("user_id")
  roleId        String     @map("role_id")
  assignedDate  DateTime?  @default(now()) @db.Timestamp(6) @map("assigned_date")
  createdAt     DateTime?  @default(now()) @db.Timestamp(6) @map("created_at")

  role          Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_roles")
}

model User {
  id                         String              @id @default(cuid())
  email                      String              @unique @db.VarChar
  passwordHash               String              @db.VarChar @map("password_hash")
  fullName                   String              @db.VarChar @map("full_name")
  phoneNumber                String?             @db.VarChar @map("phone_number")
  profilePicture             String?             @db.VarChar @map("profile_picture")
  city                       String?             @db.VarChar
  province                   String?             @db.VarChar
  isEmailVerified            Boolean?            @default(false) @map("is_email_verified")
  verificationToken          String?             @db.VarChar @map("verification_token")
  verificationTokenExpires   DateTime?           @db.Timestamp(6) @map("verification_token_expires")
  registrationDate           DateTime?           @default(now()) @db.Timestamp(6) @map("registration_date")
  lastLogin                  DateTime?           @db.Timestamp(6) @map("last_login")
  isActive                   Boolean?            @default(true) @map("is_active")
  fcmToken                   String?             @db.VarChar
  createdAt                  DateTime?           @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt                  DateTime?           @db.Timestamp(6) @map("updated_at")

  bookings                   Booking[]
  bookingParticipants        BookingParticipant[]
  certificates               Certificate[]
  commissionPayments         CommissionPayments[]
  feedback                   Feedback[]
  mentorProfile              MentorProfile?      
  notificationRecipients     NotificationRecipient[]
  practiceProgress           PracticeProgress[]
  practicePurchases          PracticePurchase[]
  practiceReviews            PracticeReview[]
  projectSubmissions         ProjectSubmission[]      @relation("SubmissionByMentee")
  gradedSubmissions          ProjectSubmission[]      @relation("SubmissionGradedByMentor")
  referralCodes              ReferralCode[]
  referralUsages             ReferralUsage[]
  userBehavior               UserBehavior[]
  userRoles                  UserRole[]

  @@map("users")
}